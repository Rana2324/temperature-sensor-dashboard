<div class="container">
  <h1>温度センサー監視システム</h1>
  

  <!-- Tab Navigation -->
  <div class="tab-container">
    <div class="tab-nav">
      <button class="tab-button" id="sensorTabBtn" onclick="switchTab('sensorTab', this)">
        <span class="tab-icon">📊</span>
        <span>センサー状態</span>
      </button>
      <button class="tab-button" id="serverTabBtn" onclick="switchTab('serverTab', this)">
        <span class="tab-icon">🖥️</span>
        <span>サーバー情報</span>
      </button>
    </div>

    <!-- Sensor Tab Content -->
    <div id="sensorTab" class="tab-content">
      <div class="sensor-panels">
        <% latestReadings.forEach((sensor, index) => { %>
          <div class="sensor-data-section" id="sensor-<%= sensor.sensorId %>">
            <div class="sensor-header">
              <h2 class="sensor-title">
                <span class="sensor-icon">🌡️</span>
                <%= sensor.sensorId %> センサー情報
              </h2>
              <div class="sensor-status <%= sensor.isActive ? 'active' : 'inactive' %>">
                <%= sensor.isActive ? '稼働中' : '停止中' %>
              </div>
            </div>
            
            <!-- Raw Data History -->
            <div class="sensor-data-section">
             
              <div class="section-controls">
                <h3>取得データ履歴 <span class="data-count">(最新100件)</span></h3>
                <button class="refresh-btn" onclick="refreshData('<%= sensor.sensorId %>')">
                  <span class="refresh-icon">🔄</span>
                </button>
              </div>
              <div class="table-wrapper">
                <table class="data-table">
                  <thead>
                    <tr>
                      <th>年月日</th>
                      <th>時刻</th>
                      <% for(let i = 1; i <= 16; i++) { %>
                      <th><%= i %></th>
                      <% } %>
                      <th>平均温度</th>
                      <th>状態</th>
                    </tr>
                  </thead>
                  <tbody id="tbody-<%= sensor.sensorId %>">
                    <% sensor.data.forEach(data => { %>
                    <tr class="<%= data.isAbnormal ? 'table-danger' : '' %>">
                      <td><%= data.acquisitionDate %></td>
                      <td><%= data.acquisitionTime %></td>
                      <% data.temperatures.forEach(temp => { %>
                      <td><%= temp %></td>
                      <% }); %>
                      <td><%= data.averageTemperature?.toFixed(1) %> °C</td>
                      <td><%= data.isAbnormal ? '異常' : '正常' %></td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            </div>
            
            <!-- Alert History -->
            <div class="section-header history-section-header">
              <h3>アラート履歴 <span class="data-count">(最新10件)</span></h3>
              <button class="expand-btn" onclick="toggleTableExpand('alerts-<%= sensor.sensorId %>-wrapper')">
                <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
              </button>
            </div>
            <div class="table-wrapper alert-table" id="alerts-<%= sensor.sensorId %>-wrapper">
              <table class="data-table">
                <thead>
                  <tr>
                    <th width="25%">取得日</th>
                    <th width="25%">取得時刻</th>
                    <th width="50%">アラート発生理由</th>
                  </tr>
                </thead>
                <tbody id="alerts-<%= sensor.sensorId %>">
                  <% (sensor.alerts || []).slice(0, 10).forEach(alert => { %>
                  <tr class="<%= alert.eventType?.includes('RECOVERY') ? 'alert-recovery' : 'alert-row' %>">
                    <td><%= alert.date || '-' %></td>
                    <td><%= alert.time || '-' %></td>
                    <td><%= alert.event || '-' %></td>
                  </tr>
                  <% }); %>
                  <% if ((sensor.alerts || []).length === 0) { %>
                    <tr class="empty-table-row">
                      <td colspan="3">アラート履歴はありません</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
            
            <!-- Settings History -->
            <div class="section-header history-section-header">
              <h3>設定変更履歴 <span class="data-count">(最新10件)</span></h3>
              <button class="expand-btn" onclick="toggleTableExpand('settings-<%= sensor.sensorId %>-wrapper')">
                <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
              </button>
            </div>
            <div class="table-wrapper settings-table" id="settings-<%= sensor.sensorId %>-wrapper">
              <table class="data-table">
                <thead>
                  <tr>
                    <th width="25%">日付</th>
                    <th width="25%">時刻</th>
                    <th width="50%">設定内容</th>
                  </tr>
                </thead>
                <tbody id="settings-<%= sensor.sensorId %>">
                  <% (sensor.settings || []).forEach(setting => { %>
                  <tr>
                    <td><%= setting.date || '-' %></td>
                    <td><%= setting.time || '-' %></td>
                    <td><%= setting.content || '-' %></td>
                  </tr>
                  <% }); %>
                  <% if ((sensor.settings || []).length === 0) { %>
                    <tr class="empty-table-row">
                      <td colspan="3">設定変更履歴はありません</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
            
            <!-- Personality History -->
            <div class="section-header history-section-header">
              <h3>個性（バイアス）履歴 <span class="data-count">(最新10件)</span></h3>
              <button class="expand-btn" onclick="toggleTableExpand('personality-<%= sensor.sensorId %>-wrapper')">
                <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
              </button>
            </div>
            <div class="table-wrapper personality-table" id="personality-<%= sensor.sensorId %>-wrapper">
              <table class="data-table">
                <thead>
                  <tr>
                    <th width="25%">日付</th>
                    <th width="25%">時刻</th>
                    <th width="50%">バイアス設定</th>
                  </tr>
                </thead>
                <tbody id="personality-<%= sensor.sensorId %>">
                  <% (sensor.personality || []).forEach(item => { %>
                  <tr>
                    <td><%= item.date || '-' %></td>
                    <td><%= item.time || '-' %></td>
                    <td><%= item.content || '-' %></td>
                  </tr>
                  <% }); %>
                  <% if ((sensor.personality || []).length === 0) { %>
                    <tr class="empty-table-row">
                      <td colspan="3">バイアス設定履歴はありません</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        <% }); %>
      </div>
    </div>

    <!-- Server Tab Content -->
    <div id="serverTab" class="tab-content">
      <h2 class="server-title">サーバー情報</h2>
      
      <div class="server-stats">
        <!-- System Status Card -->
        <div class="stat-card system-status">
          <div class="stat-header">
            <h3 class="stat-title">
              <span class="stat-icon">⚡</span>
              システム状態
            </h3>
            <span class="last-updated" id="status-last-updated">最終更新: <%= new Date().toLocaleString('ja-JP') %></span>
          </div>
          <div class="stat-content" id="system-status">
            <table class="data-table status-table">
              <tr>
                <th>MongoDB接続状態</th>
                <td id="mongodb-status">接続中</td>
              </tr>
              <tr>
                <th>センサー数</th>
                <td id="sensor-count"><%= latestReadings.length %></td>
              </tr>
              <tr>
                <th>アクティブセンサー</th>
                <td id="active-sensors"><%= latestReadings.length %></td>
              </tr>
              <tr>
                <th>最終データ受信</th>
                <td id="last-data-received">
                  <%= new Date().toLocaleString('ja-JP', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                  }) %>
                </td>
              </tr>
            </table>
          </div>
        </div>
        
        <!-- Other stat cards... -->
      </div>
    </div>
  </div>
</div>
<link rel="stylesheet" href="/styles.css">
<style>
  /* Base styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Hiragino Kaku Gothic Pro', 'メイリオ', sans-serif;
    line-height: 1.6;
    background-color: #f8f9fa;
    padding: 20px;
    color: #333;
  }

  h1 {
    font-size: 24px;
    color: #333;
    margin-bottom: 20px;
    text-align: center;
  }

  h2, h3 {
    margin: 0.5rem 0;
  }

  /* Sensor panels grid layout */
  .sensor-panels {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }

  /* Card styles for sensor data sections */
  .sensor-data-section {
    background-color: white;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .sensor-title {
    font-size: 18px;
    color: #2c3e50;
    margin-bottom: 15px;
    padding-bottom: 8px;
    border-bottom: 2px solid #3498db;
  }

  /* Table styling */
  .table-wrapper {
    max-height: 300px;
    overflow-y: auto;
    margin-bottom: 20px;
    border-radius: 4px;
    border: 1px solid #e0e0e0;
  }

  .data-table {
    width: 100%;
    border-collapse: collapse;
  }

  .data-table th {
    background-color: #4a90e2;
    color: white;
    padding: 10px;
    text-align: left;
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .data-table td {
    padding: 6px 8px;
    font-size: 0.9rem;
    border-bottom: 1px solid #eee;
  }

  .data-table th {
    padding: 8px;
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .data-table tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  /* Sensor data table specific styles */
  .data-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
  }

  .data-table th,
  .data-table td {
    text-align: center;
    padding: 8px;
    border: 1px solid #ddd;
    white-space: nowrap;
  }

  .data-table thead th {
    background-color: #4a90e2;
    font-weight: bold;
    position: sticky;
    top: 0;
    z-index: 1;
  }

  /* Column widths */
  .data-table th:nth-child(1), /* 年月日 */
  .data-table td:nth-child(1) {
    width: 100px;
  }

  .data-table th:nth-child(2), /* 時刻 */
  .data-table td:nth-child(2) {
    width: 100px;
  }

  .data-table th:nth-child(n+3):nth-child(-n+18), /* データ1-16 */
  .data-table td:nth-child(n+3):nth-child(-n+18) {
    width: 50px;
  }

  .data-table th:nth-child(19), /* 平均温度 */
  .data-table td:nth-child(19) {
    width: 80px;
  }

  .data-table th:nth-child(20), /* 状態 */
  .data-table td:nth-child(20) {
    width: 60px;
  }

  .table-danger {
    background-color: #ffebee;
  }

  /* Hover effect */
  .data-table tbody tr:hover {
    background-color: #f5f5f5;
  }

  /* Table wrapper for scrolling */
  .table-wrapper {
    max-height: 400px;
    overflow-x: auto;
    overflow-y: auto;
    margin-bottom: 1em;
    border: 1px solid #dee2e6;
    border-radius: 4px;
  }

  /* Status styling */
  .abnormal {
    background-color: #ffebee !important;
  }

  .alert-row {
    background-color: #fff8e1 !important;
  }

  .alert-recovery {
    background-color: #e3f2fd !important;
  }

  /* Temperature data specific styles */
  .temperature-data {
    max-width: 300px;
    overflow: hidden;
  }
  
  .temp-values {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-family: monospace;
  }

  .temp-values:hover {
    white-space: normal;
    word-wrap: break-word;
  }

  /* Highlight abnormal status */
  td:nth-child(5)[data-value="1"] {
    color: #dc3545;
    font-weight: bold;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .sensor-panels {
      grid-template-columns: 1fr;
    }

    .table-wrapper {
      max-height: 200px;
    }

    .data-table th, .data-table td {
      padding: 8px 6px;
      font-size: 0.9rem;
    }
  }

  /* Server stats cards */
  .server-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
  }

  .stat-card {
    background-color: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Tab Container and Navigation Styles */
  .tab-container {
    margin: 20px 0;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .tab-nav {
    display: flex;
    background-color: #f8f9fa;
    border-bottom: 2px solid #e9ecef;
    border-radius: 8px 8px 0 0;
    padding: 4px 4px 0 4px;
    gap: 2px;
  }

  .tab-button {
    flex: 1;
    padding: 12px 24px;
    font-size: 16px;
    font-weight: 600;
    color: #495057;
    background-color: transparent;
    border: none;
    border-radius: 8px 8px 0 0;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    outline: none;
  }

  .tab-button:hover {
    background-color: #e9ecef;
    color: #228be6;
  }

  .tab-button.active {
    background-color: #228be6;
    color : white;
    border: none;
    border-bottom: 2px solid #228be6;
    margin-bottom: -2px;
  }

  .tab-button:focus {
    box-shadow: 0 0 0 2px rgba(34, 139, 230, 0.3);
  }

  /* Tab Content Styles */
  .tab-content {
    display: none;
    padding: 20px;
    background: white;
    border-radius: 0 0 8px 8px;
  }

  .tab-content.active {
    display: block;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .tab-button {
      font-size: 14px;
      padding: 10px 16px;
    }
  }

  /* Additional styles for enhanced components */
  .sensor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .sensor-icon,
  .tab-icon,
  .stat-icon {
    margin-right: 8px;
  }

  .sensor-status {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
  }

  .sensor-status.active {
    background-color: rgba(76, 201, 240, 0.1);
    color: var(--success);
  }

  .sensor-status.inactive {
    background-color: rgba(247, 37, 133, 0.1);
    color: var(--warning);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px 0 12px;
  }

  .data-count {
    font-size: 14px;
    color: var(--gray-600);
    font-weight: normal;
  }

  .section-controls {
    display: flex;
    gap: 8px;
  }

  .refresh-btn,
  .expand-btn {
    background: none;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    color: var(--gray-600);
    transition: var(--transition);
  }

  .refresh-btn:hover,
  .expand-btn:hover {
    background-color: var(--gray-100);
    color: var(--primary);
  }

  .stat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
  }

  .last-updated {
    font-size: 12px;
    color: var(--gray-600);
  }

  .server-title {
    font-size: 24px;
    font-weight: 600;
    color: var(--dark);
    margin-bottom: 24px;
  }

  /* Animation for refresh button */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .refresh-btn.spinning .refresh-icon {
    display: inline-block;
    animation: spin 1s linear infinite;
  }


  
</style>

<script>
  // Function to update sensor data display
  function updateSensorData(data) {
    if (!data || !data.sensorId) return;
    
    const tbody = document.getElementById(`tbody-${data.sensorId}`);
    if (!tbody) return;
    
    // Create a new row for the data
    const row = document.createElement('tr');
    row.className = data.isAbnormal ? 'table-danger' : '';
    
    // Format date and time
    const date = new Date(data.timestamp);
    const formattedDate = date.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).replace(/\//g, '-');
    
    const formattedTime = date.toLocaleTimeString('ja-JP', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    });
    
    // Create row content
    let rowHTML = `
      <td>${formattedDate}</td>
      <td>${formattedTime}</td>
    `;
    
    // Add the 16 temperature readings
    if (data.temperatures && Array.isArray(data.temperatures)) {
      data.temperatures.forEach(temp => {
        rowHTML += `<td>${typeof temp === 'number' ? temp.toFixed(1) : '--'}</td>`;
      });
      // Fill remaining slots if less than 16 readings
      for (let i = data.temperatures.length; i < 16; i++) {
        rowHTML += '<td>--</td>';
      }
    } else {
      // If no temperature data, fill all 16 slots with placeholder
      for (let i = 0; i < 16; i++) {
        rowHTML += '<td>--</td>';
      }
    }
    
    // Add average temperature and status
    const avgTemp = data.temperatures ? 
      (data.temperatures.reduce((sum, temp) => sum + (typeof temp === 'number' ? temp : 0), 0) / data.temperatures.length).toFixed(1) :
      '--';
    
    rowHTML += `
      <td>${avgTemp} °C</td>
      <td>${data.isAbnormal ? '異常' : '正常'}</td>
    `;
    
    row.innerHTML = rowHTML;
    
    // Add to the beginning of the table
    tbody.insertBefore(row, tbody.firstChild);
    
    // Keep only the latest 100 rows
    while (tbody.children.length > 100) {
      tbody.removeChild(tbody.lastChild);
    }
  }
  
  // Function to handle the refresh button click
  function refreshData(sensorId) {
    // Get the refresh button and add the spinning class
    const refreshBtn = event.currentTarget;
    refreshBtn.classList.add('spinning');
    
    // Fetch the latest data for the specific sensor
    fetch(`/api/sensor-data/${sensorId}/latest`)
      .then(response => response.json())
      .then(data => {
        if (data) {
          // Clear existing table data
          const tbody = document.getElementById(`tbody-${sensorId}`);
          if (tbody) {
            tbody.innerHTML = '';
          }
          // Update with new data
          if (Array.isArray(data)) {
            data.forEach(item => {
              if (item) updateSensorData(item);
            });
          } else {
            updateSensorData(data);
          }
          console.log(`Data refreshed for sensor ${sensorId}`);
        }
      })
      .catch(error => console.error(`Error refreshing sensor data (${sensorId}):`, error))
      .finally(() => {
        // Remove the spinning class after a short delay for visual feedback
        setTimeout(() => {
          refreshBtn.classList.remove('spinning');
        }, 500);
      });
  }
  
  // Function to handle alert updates
  function handleAlert(data) {
    if (!data || !data.sensorId) return;
    
    const alertsTable = document.getElementById(`alerts-${data.sensorId}`);
    if (!alertsTable) return;
    
    // Create a new row for the alert
    const row = document.createElement('tr');
    row.className = data.eventType && data.eventType.includes('RECOVERY') ? 'alert-recovery' : 'alert-row';
    
    // Create row content
    row.innerHTML = `
      <td>${data.date || '-'}</td>
      <td>${data.time || '-'}</td>
      <td>${data.event || '-'}</td>
    `;
    
    // Add to the beginning of the table
    alertsTable.insertBefore(row, alertsTable.firstChild);
    
    // Keep only the latest 10 rows
    while (alertsTable.children.length > 10) {
      alertsTable.removeChild(alertsTable.lastChild);
    }
  }
  
  // Function to handle settings updates
  function handleSettingChange(data) {
    if (!data || !data.sensorId) return;
    
    const settingsTable = document.getElementById(`settings-${data.sensorId}`);
    if (!settingsTable) return;
    
    // Format the content
    let content = data.content;
    if (!content && data.changeType) {
      if (data.changeType === 'threshold' && data.value) {
        const { high, low } = data.value;
        content = `しきい値（高: ${high}°C / 低: ${low}°C）`;
      } else if (data.changeType === 'interval' && data.value) {
        content = `読取間隔変更: ${data.value}ms`;
      } else {
        content = `${data.changeType}の設定変更`;
      }
    }
    
    // Create a new row
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${data.date || '-'}</td>
      <td>${data.time || '-'}</td>
      <td>${content || '-'}</td>
    `;
    
    // Add to the beginning of the table
    settingsTable.insertBefore(row, settingsTable.firstChild);
  }
  
  // Function to handle personality updates
  function handlePersonalityUpdate(data) {
    if (!data || !data.sensorId) return;
    
    const personalityTable = document.getElementById(`personality-${data.sensorId}`);
    if (!personalityTable) return;
    
    // Format the content
    let content = data.content;
    if (!content && data.biasType) {
      if (data.biasType === 'temperature_offset' && data.biasValue) {
        const offset = data.biasValue.offset;
        const sign = offset > 0 ? '+' : '';
        content = `温度補正バイアス: ${sign}${offset}°C`;
      } else if (data.biasType === 'sensitivity' && data.biasValue) {
        content = `感度設定: ${data.biasValue.level}`;
      } else {
        content = `${data.biasType}の設定`;
      }
    }
    
    // Create a new row
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${data.date || '-'}</td>
      <td>${data.time || '-'}</td>
      <td>${content || '-'}</td>
    `;
    
    // Add to the beginning of the table
    personalityTable.insertBefore(row, personalityTable.firstChild);
  }
  
  // Function to fetch latest data every second
  setInterval(() => {
    fetch('/api/sensor-data/latest')
      .then(response => response.json())
      .then(data => {
        if (Array.isArray(data)) {
          data.forEach(sensorData => {
            if (sensorData) updateSensorData(sensorData);
          });
        }
      })
      .catch(error => console.error('Error fetching sensor data:', error));
  }, 1000);
  
  // Fetch alerts, settings, etc. less frequently (every 5 seconds)
  setInterval(() => {
    // Fetch latest alerts
    fetch('/api/alerts')
      .then(response => response.json())
      .then(data => {
        if (Array.isArray(data)) {
          data.forEach(alert => {
            if (alert) handleAlert(alert);
          });
        }
      })
      .catch(error => console.error('Error fetching alerts:', error));
      
    // Fetch latest settings
    fetch('/api/settings')
      .then(response => response.json())
      .then(data => {
        if (Array.isArray(data)) {
          data.forEach(setting => {
            if (setting) handleSettingChange(setting);
          });
        }
      })
      .catch(error => console.error('Error fetching settings:', error));
      
    // Fetch latest personality data
    fetch('/api/personality')
      .then(response => response.json())
      .then(data => {
        if (Array.isArray(data)) {
          data.forEach(item => {
            if (item) handlePersonalityUpdate(item);
          });
        }
      })
      .catch(error => console.error('Error fetching personality data:', error));
  }, 5000);

  // Tab switching logic
  document.addEventListener('DOMContentLoaded', () => {
    // Set initial active tab
    const defaultTab = 'sensorTab';
    const defaultBtn = document.getElementById('sensorTabBtn');
    switchTab(defaultTab, defaultBtn);

    // Initialize all expand/collapse buttons with proper state
    document.querySelectorAll('.section-header .expand-btn').forEach(btn => {
      const wrapperId = btn.getAttribute('data-wrapper-id');
      if (wrapperId) {
        const wrapper = document.getElementById(wrapperId);
        if (wrapper) {
          updateExpandButtonText(btn, wrapper.classList.contains('expanded'));
        }
      }
    });
  });

  function switchTab(tabId, buttonElement) {
    // Remove active class from all tabs and buttons
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Show selected tab and activate button
    const selectedTab = document.getElementById(tabId);
    selectedTab.style.display = 'block';
    selectedTab.classList.add('active');
    buttonElement.classList.add('active');
    
    // Store the active tab in localStorage
    localStorage.setItem('activeTab', tabId);
    localStorage.setItem('activeTabBtn', buttonElement.id);
  }

  // Restore tab state on page load
  const savedTab = localStorage.getItem('activeTab');
  const savedTabBtn = localStorage.getItem('activeTabBtn');
  if (savedTab && savedTabBtn) {
    const btn = document.getElementById(savedTabBtn);
    if (btn) {
      switchTab(savedTab, btn);
    }
  }

  // Updated function to toggle table expansion with animation
  function toggleTableExpand(wrapperId) {
    const wrapper = document.getElementById(wrapperId);
    if (!wrapper) return;
    
    // Toggle expanded class
    wrapper.classList.toggle('expanded');
    
    // Update button text
    const isExpanded = wrapper.classList.contains('expanded');
    const btn = event.currentTarget;
    const toggleIcon = btn.querySelector('.toggle-icon');
    const toggleText = btn.querySelector('.toggle-text');
    
    if (toggleIcon) toggleIcon.textContent = isExpanded ? '⌃' : '⌄';
    if (toggleText) toggleText.textContent = isExpanded ? '折りたたむ' : '展開';
    
    btn.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');
    
    // Check for scroll content after expansion
    setTimeout(() => {
      const hasMoreContent = wrapper.scrollHeight > wrapper.clientHeight + 10;
      wrapper.classList.toggle('has-more-content', hasMoreContent);
    }, 300); // Wait for animation to complete
  }

  // Function to initialize all history tables
  function initializeHistoryTables() {
    document.querySelectorAll('.alert-table, .settings-table, .personality-table').forEach(wrapper => {
      // Check if the table has content
      const tableBody = wrapper.querySelector('tbody');
      const hasRows = tableBody && tableBody.children.length > 0;
      
      // Add appropriate classes based on content
      if (hasRows) {
        wrapper.classList.add('has-content');
        
        // Check if scrolling is needed
        const hasMoreContent = wrapper.scrollHeight > wrapper.clientHeight + 10;
        wrapper.classList.toggle('has-more-content', hasMoreContent);
      } else {
        wrapper.classList.add('empty');
      }
      
      // Set up expand button state
      const wrapperId = wrapper.id;
      if (wrapperId) {
        const btn = document.querySelector(`.expand-btn[onclick*="${wrapperId}"]`);
        if (btn) {
          const isExpanded = wrapper.classList.contains('expanded');
          const toggleIcon = btn.querySelector('.toggle-icon');
          const toggleText = btn.querySelector('.toggle-text');
          
          if (toggleIcon) toggleIcon.textContent = isExpanded ? '⌃' : '⌄';
          if (toggleText) toggleText.textContent = isExpanded ? '折りたたむ' : '展開';
          
          btn.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');
        }
      }
    });
  }

  // Call initialization on page load
  document.addEventListener('DOMContentLoaded', () => {
    initializeHistoryTables();
    
    // Add scroll detection for table wrappers
    document.querySelectorAll('.table-wrapper').forEach(wrapper => {
      wrapper.addEventListener('scroll', () => {
        const hasMore = wrapper.scrollHeight > wrapper.clientHeight + 10;
        wrapper.classList.toggle('has-more-content', hasMore);
      });
    });
  });
</script>