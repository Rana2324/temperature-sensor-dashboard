<div class="container">
  <h1>自立分散AIブロックチェーンセル　デモ画面イメージ</h1>

  <!-- Debugging Information -->
  <script>
    console.log('Latest Readings:', '<%= JSON.stringify(latestReadings) %>');
  </script>

  <!-- Sensors Overview Section -->
  <div class="sensor-panels">
    <% latestReadings.forEach((sensor, index) => { %>
    <div class="card" data-sensor-id="<%= sensor.sensorId %>">
      <div class="card-header">
        <h2>温度センサー<%= sensor.sensorId %></h2>
      </div>
      <div class="card-body">
        <!-- Latest Temperature Display -->
        <div class="current-temp">
          <h3>現在の温度</h3>
          <div class="temperature-display" id="current-temp-<%= sensor.sensorId %>">
            <%= sensor.data[0]?.averageTemperature?.toFixed(1) || '--' %> °C
          </div>
        </div>
        <!-- Data Table -->
        <h3>取得データ</h3>
        <div class="table-wrapper">
          <table class="data-table">
            <thead>
              <tr>
                <th>年月日</th>
                <th>時刻</th>
                <% for(let i = 1; i <= 16; i++) { %>
                <th><%= i %></th>
                <% } %>
                <th>平均温度</th>
                <th>状態</th>
              </tr>
            </thead>
            <tbody id="tbody-<%= sensor.sensorId %>">
              <% sensor.data.forEach(data => { %>
              <tr class="<%= data.isAbnormal ? 'table-danger' : '' %>">
                <td><%= data.acquisitionDate %></td>
                <td><%= data.acquisitionTime %></td>
                <% data.temperatures.forEach(temp => { %>
                <td><%= temp %></td>
                <% }); %>
                <td><%= data.averageTemperature?.toFixed(1) %> °C</td>
                <td><%= data.isAbnormal ? '異常' : '正常' %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>

        <div class="section-container">

        </div>
        <!-- Alert Section -->
        <div class="section-header">
          <h3>アラート</h3>
        </div>
        <div class="table-wrapper alert-table" id="alerts-<%= sensor.sensorId %>-wrapper">
          <table class="data-table">
            <thead>
              <tr>
                <th>年月日</th>
                <th>時刻</th>
                <th>事象</th>
              </tr>
            </thead>
            <tbody id="alerts-<%= sensor.sensorId %>">
              <% sensor.alerts?.forEach(alert => { %>
              <tr class="<%= alert.eventType === 'ABNORMAL_DATA' || alert.eventType === 'SENSOR_ERROR' ? 'table-danger' : '' %>">
                <td><%= alert.date %></td>
                <td><%= alert.time %></td>
                <td><%= alert.event %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <!-- Settings Change Section -->
        <div class="section-header">
          <h3>設定変更</h3>
        </div>
        <div class="table-wrapper settings-table" id="settings-<%= sensor.sensorId %>-wrapper">
          <table class="data-table">
            <thead>
              <tr>
                <th>年月日</th>
                <th>時刻</th>
                <th>設定変更内容</th>
              </tr>
            </thead>
            <tbody id="settings-<%= sensor.sensorId %>">
              <% sensor.settings?.forEach(setting => { %>
              <tr>
                <td><%= setting.date %></td>
                <td><%= setting.time %></td>
                <td><%= setting.content %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <!-- Personality (Bias) Section -->
        <div class="section-header">
          <h3>個性(バイアス)</h3>
        </div>
        <div class="table-wrapper personality-table" id="personality-<%= sensor.sensorId %>-wrapper">
          <table class="data-table">
            <thead>
              <tr>
                <th>年月日</th>
                <th>時刻</th>
                <th>個性(バイアス)</th>
              </tr>
            </thead>
            <tbody id="personality-<%= sensor.sensorId %>">
              <% sensor.personality?.forEach(item => { %>
              <tr>
                <td><%= item.date %></td>
                <td><%= item.time %></td>
                <td><%= item.content %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <% }); %>
  </div>
</div>

<style>
  /* Base styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Hiragino Kaku Gothic Pro', 'メイリオ', sans-serif;
    line-height: 1.6;
    background-color: #f8f9fa;
    padding: 20px;
    color: #333;
  }

  header {
    background-color: #333;
    color: #fff;
    padding: 1rem;
    text-align: center;
  }

  main {
    padding: 1rem;
  }

  h1 {
    font-size: 24px;
    color: #333;
    margin-bottom: 20px;
    text-align: center;
  }

  h2,
  h3 {
    margin: 0.5rem 0;
  }

  .container {
    width: 100%;
    margin: 0 auto;
  }

  #sensor-data,
  #alerts {
    margin-bottom: 2rem;
  }

  /* Sensor panels grid layout */
  .sensor-panels {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }

  /* Card styles */
  .card {
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .card-header {
    background-color: #4a90e2;
    color: white;
    padding: 12px 15px;
    border-radius: 8px 8px 0 0;
    font-weight: bold;
  }

  .card-body {
    padding: 15px;
  }

  /* Section headers */
  .card-body h3 {
    font-size: 16px;
    color: #2c3e50;
    margin-bottom: 10px;
    padding-bottom: 5px;
    border-bottom: 2px solid #4a90e2;
  }

  /* Table styles */
  .table-wrapper {
    max-height: 300px;
    overflow-y: auto;
    margin-bottom: 15px;
    border-radius: 4px;
    border: 1px solid #e0e0e0;
  }

  .data-table {
    width: 100%;
    border-collapse: collapse;
    background-color: white;
  }

  .table-wrapper .data-table tr>th {
    padding: 8px;
    text-align: center;
    border: 1px solid #e0e0e0;
    font-size: 14px;
    background-color: #96dcf8;

  }

  .data-table td {
    padding: 8px;
    text-align: center;
    border: 1px solid #e0e0e0;
    font-size: 14px;
  }

  .data-table th {
    background-color: #f5f6fa;
    color: #2c3e50;
    font-weight: bold;
    position: sticky;
    top: 0;
    z-index: 1;
  }

  /* Temperature color coding */
  .high-temp {
    background-color: #ffe5e5;
  }

  .low-temp {
    background-color: #e5e5ff;
  }

  .normal-temp {
    background-color: #e6ffe6;
  }

  /* Alert styling */
  .table-danger {
    background-color: #fff5f5;
    color: #c53030;
  }

  /* Scrollbar styling */
  .table-wrapper::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  .table-wrapper::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  .table-wrapper::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 4px;
  }

  .table-wrapper::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    body {
      padding: 10px;
    }

    .sensor-panels {
      grid-template-columns: 1fr;
    }

    .card-body {
      padding: 10px;
    }

    .data-table th,
    .data-table td {
      padding: 6px;
      font-size: 13px;
    }
  }

  /* Animation for alerts */
  @keyframes highlight {
    0% {
      background-color: #fff5f5;
    }

    50% {
      background-color: #fed7d7;
    }

    100% {
      background-color: #fff5f5;
    }
  }

  .table-danger {
    animation: highlight 2s ease-in-out infinite;
  }

  /* Navbar styles */
  .navbar {
    background-color: #333;
    padding: 1rem;
    margin-bottom: 2rem;
  }

  .navbar-brand {
    color: white;
    font-size: 1.25rem;
    font-weight: bold;
  }

  /* Connection status */
  .connection-status {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1000;
    padding: 5px 10px;
    border-radius: 4px;
    display: none;
    font-size: 14px;
  }

  .connection-status.connected {
    background-color: #4caf50;
    color: white;
    display: block;
  }

  .connection-status.disconnected {
    background-color: #f44336;
    color: white;
    display: block;
  }

  /* Additional utility classes */
  .abnormal {
    background-color: #ffebee;
  }

  .alert-history {
    max-height: 300px;
    overflow-y: auto;
  }

  /* Grid layout for sensors */
  .row {
    display: flex;
    flex-wrap: wrap;
    margin: -10px;
  }

  .col-md-4 {
    flex: 0 0 calc(33.333% - 20px);
    margin: 10px;
  }

  /* Table styles */
  .table-wrapper {
    max-height: 300px;
    overflow-y: auto;
    margin-bottom: 15px;
    border-radius: 4px;
    border: 1px solid #e0e0e0;
    position: relative;
    scroll-behavior: smooth;
    /* Add smooth scrolling */
  }

  /* Special styles for alert, settings and personality tables to make scrollbars more prominent when data increases */
  .table-wrapper.alert-table,
  .table-wrapper.settings-table,
  .table-wrapper.personality-table {
    max-height: 200px;
    /* Smaller default height */
    transition: max-height 0.3s ease;
    /* Smooth height transition */
  }

  /* When tables have more data, increase the height */
  .table-wrapper.alert-table.expanded,
  .table-wrapper.settings-table.expanded,
  .table-wrapper.personality-table.expanded {
    max-height: 400px;
    /* More space for expanded content */
  }

  /* Scrollbar indicator for tables with more content */
  .table-wrapper::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 15px;
    background: linear-gradient(to top, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0));
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .table-wrapper.has-more-content::after {
    opacity: 1;
    /* Show gradient when there's more content */
  }

  /* Ensure scrollbars are always visible on supported browsers */
  .table-wrapper {
    scrollbar-width: thin;
    /* Firefox */
    scrollbar-color: #cbd5e0 #f1f1f1;
    /* Firefox */
  }

  /* Scrollbar styling for WebKit browsers */
  .table-wrapper::-webkit-scrollbar {
    width: 8px;
    height: 8px;
    background-color: #f1f1f1;
  }

  .table-wrapper::-webkit-scrollbar-thumb {
    background-color: #cbd5e0;
    border-radius: 10px;
    transition: background-color 0.3s ease;
  }

  .table-wrapper::-webkit-scrollbar-thumb:hover {
    background-color: #a0aec0;
  }

  /* Expand button for tables */
  .expand-table-btn {
    display: inline-block;
    margin-left: 10px;
    font-size: 12px;
    color: #4a90e2;
    cursor: pointer;
    user-select: none;
  }

  .expand-table-btn:hover {
    text-decoration: underline;
  }

  /* Section headers with expand toggle */
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  @media (max-width: 992px) {
    .col-md-4 {
      flex: 0 0 calc(50% - 20px);
    }
  }

  @media (max-width: 768px) {
    .col-md-4 {
      flex: 0 0 calc(100% - 20px);
    }
  }
</style>


<script src="/socket.io/socket.io.js"></script>
<script>
  // Add scroll position memory for tables
  const scrollPositions = {};

  // Function to save scroll position
  function saveScrollPosition(tableWrapper) {
    const sensorId = tableWrapper.closest('.card').dataset.sensorId;
    const tableId = tableWrapper.id;
    const key = `${sensorId}-${tableId}`;
    scrollPositions[key] = tableWrapper.scrollTop;
  }

  // Function to restore scroll position
  function restoreScrollPosition(tableWrapper) {
    const sensorId = tableWrapper.closest('.card').dataset.sensorId;
    const tableId = tableWrapper.id;
    const key = `${sensorId}-${tableId}`;
    if (scrollPositions[key] !== undefined) {
      tableWrapper.scrollTop = scrollPositions[key];
    }
  }

  function updateSensorData(data) {
    console.log('Updating sensor data:', data); // Logging for debugging
    // Update current temperature display
    const currentTempDisplay = document.getElementById(`current-temp-${data.sensorId}`);
    if (currentTempDisplay) {
      currentTempDisplay.textContent = `${data.averageTemperature.toFixed(1)} °C`;
    }

    // Update data table
    const tbody = document.getElementById(`tbody-${data.sensorId}`);
    if (!tbody) return;

    const row = document.createElement('tr');
    row.className = data.isAbnormal ? 'table-danger' : '';

    row.innerHTML = `
        <td>${data.acquisitionDate}</td>
        <td>${data.acquisitionTime}</td>
        ${data.temperatures.map(temp => `<td>${temp}</td>`).join('')}
        <td>${data.averageTemperature.toFixed(1)} °C</td>
        <td>${data.isAbnormal ? '異常' : '正常'}</td>
    `;

    tbody.insertBefore(row, tbody.firstChild);

    // Keep only the latest 100 rows
    while (tbody.children.length > 100) {
      tbody.removeChild(tbody.lastChild);
    }

    // Auto-scroll to top if user is at top
    const container = tbody.closest('.table-wrapper');
    if (container && container.scrollTop <= 50) {
      container.scrollTop = 0;
    }
  }

  function updateAlertTable(data) {
    const alertsTable = document.getElementById(`alerts-${data.sensorId}`);
    if (!alertsTable) return;

    const wrapper = document.getElementById(`alerts-${data.sensorId}-wrapper`);
    if (wrapper) {
      saveScrollPosition(wrapper);
    }

    const row = document.createElement('tr');
    // Add the proper class based on event type
    if (data.eventType === 'ABNORMAL_DATA' || data.eventType === 'SENSOR_ERROR') {
      row.className = 'table-danger';
    }

    row.innerHTML = `
        <td>${data.date}</td>
        <td>${data.time}</td>
        <td>${data.event}</td>
    `;

    alertsTable.insertBefore(row, alertsTable.firstChild);

    // Keep only the latest 50 rows
    while (alertsTable.children.length > 50) {
      alertsTable.removeChild(alertsTable.lastChild);
    }

    // Auto-scroll to top if user is at top
    if (wrapper) {
      if (wrapper.scrollTop <= 50) {
        wrapper.scrollTop = 0;
      } else {
        restoreScrollPosition(wrapper);
      }

      // Check if scrollbar is needed
      if (wrapper.scrollHeight > wrapper.clientHeight) {
        wrapper.classList.add('has-more-content');
      }
    }
  }

  function updateSettingsTable(data) {
    console.log('Updating settings table with:', data);
    const settingsTable = document.getElementById(`settings-${data.sensorId}`);
    if (!settingsTable) {
      console.warn('Settings table not found for sensor:', data.sensorId);
      return;
    }

    const wrapper = document.getElementById(`settings-${data.sensorId}-wrapper`);
    if (wrapper) {
      saveScrollPosition(wrapper);
    }

    const row = document.createElement('tr');
    // Handle both formats of data (raw and formatted)
    row.innerHTML = `
        <td>${data.date || ''}</td>
        <td>${data.time || ''}</td>
        <td>${data.content || (data.changeType && data.value ? `${data.changeType}: ${JSON.stringify(data.value)}` : '')}</td>
    `;

    settingsTable.insertBefore(row, settingsTable.firstChild);

    // Keep only the latest 50 rows
    while (settingsTable.children.length > 50) {
      settingsTable.removeChild(settingsTable.lastChild);
    }

    // Auto-scroll to top if user is at top
    if (wrapper) {
      if (wrapper.scrollTop <= 50) {
        wrapper.scrollTop = 0;
      } else {
        restoreScrollPosition(wrapper);
      }

      // Check if scrollbar is needed
      if (wrapper.scrollHeight > wrapper.clientHeight) {
        wrapper.classList.add('has-more-content');
      }
    }
  }

  function updatePersonalityTable(data) {
    console.log('Updating personality table with:', data);
    const personalityTable = document.getElementById(`personality-${data.sensorId}`);
    if (!personalityTable) {
      console.warn('Personality table not found for sensor:', data.sensorId);
      return;
    }

    const wrapper = document.getElementById(`personality-${data.sensorId}-wrapper`);
    if (wrapper) {
      saveScrollPosition(wrapper);
    }

    const row = document.createElement('tr');
    // Handle both formats of data (raw and formatted)
    row.innerHTML = `
        <td>${data.date || ''}</td>
        <td>${data.time || ''}</td>
        <td>${data.content || (data.biasType && data.biasValue ? `${data.biasType}: ${JSON.stringify(data.biasValue)}` : '')}</td>
    `;

    personalityTable.insertBefore(row, personalityTable.firstChild);

    // Keep only the latest 50 rows
    while (personalityTable.children.length > 50) {
      personalityTable.removeChild(personalityTable.lastChild);
    }

    // Auto-scroll to top if user is at top
    if (wrapper) {
      if (wrapper.scrollTop <= 50) {
        wrapper.scrollTop = 0;
      } else {
        restoreScrollPosition(wrapper);
      }

      // Check if scrollbar is needed
      if (wrapper.scrollHeight > wrapper.clientHeight) {
        wrapper.classList.add('has-more-content');
      }
    }
  }

  // Automatic refresh function
  function setupAutoRefresh() {
    console.log('Setting up auto-refresh'); // Logging for debugging
    // Request new data every 30 seconds if no real-time updates
    setInterval(() => {
      console.log('Fetching new sensor data'); // Logging for debugging
      fetch('/api/sensor-data')
        .then(response => response.json())
        .then(readings => {
          console.log('Received sensor data:', readings); // Logging for debugging
          readings.forEach(data => {
            if (data) updateSensorData(data);
          });
        })
        .catch(error => console.error('Error fetching sensor data:', error));

      fetch('/api/alerts')
        .then(response => response.json())
        .then(alerts => {
          alerts.forEach(data => {
            if (data) updateAlertTable(data);
          });
        })
        .catch(error => console.error('Error fetching alerts:', error));

      fetch('/api/settings')
        .then(response => {
          console.log('Settings response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(settings => {
          console.log('Received settings:', settings);
          if (Array.isArray(settings)) {
            settings.forEach(data => {
              if (data) updateSettingsTable(data);
            });
          }
        })
        .catch(error => {
          console.error('Error fetching settings:', error);
          console.error('Error details:', error.message);
        });

      fetch('/api/personality')
        .then(response => {
          console.log('Personality response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(personalities => {
          console.log('Received personalities:', personalities);
          if (Array.isArray(personalities)) {
            personalities.forEach(data => {
              if (data) updatePersonalityTable(data);
            });
          }
        })
        .catch(error => {
          console.error('Error fetching personality data:', error);
          console.error('Error details:', error.message);
        });
    }, 30000);
  }

  // Setup table expansion functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Handle table expansion
    const expandButtons = document.querySelectorAll('.expand-table-btn');
    expandButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const targetId = btn.getAttribute('data-target');
        const tableWrapper = document.getElementById(targetId);

        if (tableWrapper.classList.contains('expanded')) {
          tableWrapper.classList.remove('expanded');
          btn.textContent = '展開'; // "Expand" in Japanese
        } else {
          tableWrapper.classList.add('expanded');
          btn.textContent = '折りたたむ'; // "Collapse" in Japanese
        }
      });
    });

    // Check which tables need scrollbars
    const checkScrollNeeded = () => {
      const tableWrappers = document.querySelectorAll('.table-wrapper');
      tableWrappers.forEach(wrapper => {
        const hasScrollbar = wrapper.scrollHeight > wrapper.clientHeight;

        if (hasScrollbar) {
          wrapper.classList.add('has-more-content');
        } else {
          wrapper.classList.remove('has-more-content');
        }
      });
    };

    // Initial check for scrollbars
    checkScrollNeeded();

    // Save scroll positions
    const tableWrappers = document.querySelectorAll('.table-wrapper');
    tableWrappers.forEach(wrapper => {
      wrapper.addEventListener('scroll', () => {
        saveScrollPosition(wrapper);
      });
    });

    // When data is added, check if scrollbars are needed
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          checkScrollNeeded();
        }
      });
    });

    // Watch for changes in table bodies
    document.querySelectorAll('tbody').forEach(tbody => {
      observer.observe(tbody, {
        childList: true
      });
    });
  });

  // Initialize auto-refresh
  setupAutoRefresh();

  // Initialize Socket.IO
  const socket = io();

  // Log connection status
  socket.on('connect', () => {
    console.log('Connected to server');
    const connectionStatus = document.getElementById('connectionStatus');
    if (connectionStatus) {
      connectionStatus.textContent = 'Connected';
      connectionStatus.className = 'connection-status connected';
    }
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from server');
    const connectionStatus = document.getElementById('connectionStatus');
    if (connectionStatus) {
      connectionStatus.textContent = 'Disconnected';
      connectionStatus.className = 'connection-status disconnected';
    }
  });

  // Set up Socket.IO event listeners (only once)
  socket.on('newSensorData', (data) => {
    console.log('Received new sensor data via Socket.IO:', data);
    updateSensorData(data);
  });

  socket.on('alert', (data) => {
    console.log('Received alert via Socket.IO:', data);
    updateAlertTable(data);
  });

  socket.on('settingChange', (data) => {
    console.log('Received settings change via Socket.IO:', data);
    // Format the setting data for display
    const formattedData = {
      sensorId: data.sensorId,
      date: data.date,
      time: data.time,
      content: formatSettingForDisplay(data)
    };
    updateSettingsTable(formattedData);
  });

  socket.on('personalityUpdate', (data) => {
    console.log('Received personality update via Socket.IO:', data);
    // Format the personality data for display
    const formattedData = {
      sensorId: data.sensorId,
      date: data.date,
      time: data.time,
      content: formatPersonalityForDisplay(data)
    };
    updatePersonalityTable(formattedData);
  });

  // Helper functions to format the data nicely on the client side
  function formatSettingForDisplay(setting) {
    if (setting.changeType === 'threshold' && setting.value) {
      const {
        high,
        low
      } = setting.value;
      return `しきい値（高: ${high}°C / 低: ${low}°C）`;
    } else if (setting.changeType === 'interval' && setting.value) {
      return `読取間隔変更: ${setting.value}ms`;
    }
    // If already formatted with content property, use that
    if (setting.content) {
      return setting.content;
    }
    return `${setting.changeType}の設定変更`;
  }

  function formatPersonalityForDisplay(personality) {
    if (personality.biasType === 'temperature_offset' && personality.biasValue) {
      const offset = personality.biasValue.offset;
      const sign = offset > 0 ? '+' : '';
      return `温度補正バイアス: ${sign}${offset}°C`;
    } else if (personality.biasType === 'sensitivity' && personality.biasValue) {
      return `感度設定: ${personality.biasValue.level}`;
    }
    // If already formatted with content property, use that
    if (personality.content) {
      return personality.content;
    }
    return `${personality.biasType}の設定`;
  }
</script>